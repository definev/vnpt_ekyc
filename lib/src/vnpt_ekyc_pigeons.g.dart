// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class PigeonEkycData {
  PigeonEkycData({
    required this.name,
    required this.dob,
    required this.province,
    required this.district,
    required this.ward,
    required this.citizenId,
    required this.issueBy,
    required this.issueDate,
    required this.address,
    required this.gender,
    required this.prob,
  });

  String name;

  String dob;

  String province;

  String district;

  String ward;

  String citizenId;

  String issueBy;

  String issueDate;

  String address;

  String gender;

  double prob;

  Object encode() {
    return <Object?>[
      name,
      dob,
      province,
      district,
      ward,
      citizenId,
      issueBy,
      issueDate,
      address,
      gender,
      prob,
    ];
  }

  static PigeonEkycData decode(Object result) {
    result as List<Object?>;
    return PigeonEkycData(
      name: result[0]! as String,
      dob: result[1]! as String,
      province: result[2]! as String,
      district: result[3]! as String,
      ward: result[4]! as String,
      citizenId: result[5]! as String,
      issueBy: result[6]! as String,
      issueDate: result[7]! as String,
      address: result[8]! as String,
      gender: result[9]! as String,
      prob: result[10]! as double,
    );
  }
}

class PigeonEkycResponse {
  PigeonEkycResponse({
    this.error,
    this.data,
  });

  String? error;

  PigeonEkycData? data;

  Object encode() {
    return <Object?>[
      error,
      data,
    ];
  }

  static PigeonEkycResponse decode(Object result) {
    result as List<Object?>;
    return PigeonEkycResponse(
      error: result[0] as String?,
      data: result[1] as PigeonEkycData?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonEkycData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else     if (value is PigeonEkycResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return PigeonEkycData.decode(readValue(buffer)!);
      case 130: 
        return PigeonEkycResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class VnptEkycPigeon {
  /// Constructor for [VnptEkycPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VnptEkycPigeon({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<PigeonEkycResponse> ekyc(String accessToken, String tokenId, String tokenKey, {String language = 'vi',}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.vnpt_ekyc_pigeon.VnptEkycPigeon.ekyc$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[accessToken, tokenId, tokenKey, language]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PigeonEkycResponse?)!;
    }
  }
}
