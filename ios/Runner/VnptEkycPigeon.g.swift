// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonEkycData {
  var name: String
  var dob: String
  var province: String
  var district: String
  var ward: String
  var citizenId: String
  var issueBy: String
  var issueDate: String
  var address: String
  var gender: String
  var prob: Double



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PigeonEkycData? {
    let name = pigeonVar_list[0] as! String
    let dob = pigeonVar_list[1] as! String
    let province = pigeonVar_list[2] as! String
    let district = pigeonVar_list[3] as! String
    let ward = pigeonVar_list[4] as! String
    let citizenId = pigeonVar_list[5] as! String
    let issueBy = pigeonVar_list[6] as! String
    let issueDate = pigeonVar_list[7] as! String
    let address = pigeonVar_list[8] as! String
    let gender = pigeonVar_list[9] as! String
    let prob = pigeonVar_list[10] as! Double

    return PigeonEkycData(
      name: name,
      dob: dob,
      province: province,
      district: district,
      ward: ward,
      citizenId: citizenId,
      issueBy: issueBy,
      issueDate: issueDate,
      address: address,
      gender: gender,
      prob: prob
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      dob,
      province,
      district,
      ward,
      citizenId,
      issueBy,
      issueDate,
      address,
      gender,
      prob,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonEkycResponse {
  var error: String? = nil
  var data: PigeonEkycData? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PigeonEkycResponse? {
    let error: String? = nilOrValue(pigeonVar_list[0])
    let data: PigeonEkycData? = nilOrValue(pigeonVar_list[1])

    return PigeonEkycResponse(
      error: error,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      error,
      data,
    ]
  }
}

private class VnptEkycPigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return PigeonEkycData.fromList(self.readValue() as! [Any?])
    case 130:
      return PigeonEkycResponse.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class VnptEkycPigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonEkycData {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonEkycResponse {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class VnptEkycPigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return VnptEkycPigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return VnptEkycPigeonPigeonCodecWriter(data: data)
  }
}

class VnptEkycPigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = VnptEkycPigeonPigeonCodec(readerWriter: VnptEkycPigeonPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol VnptEkycPigeon {
  func ekyc(accessToken: String, tokenId: String, tokenKey: String, language: String, completion: @escaping (Result<PigeonEkycResponse, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class VnptEkycPigeonSetup {
  static var codec: FlutterStandardMessageCodec { VnptEkycPigeonPigeonCodec.shared }
  /// Sets up an instance of `VnptEkycPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: VnptEkycPigeon?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let ekycChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.vnpt_ekyc_pigeon.VnptEkycPigeon.ekyc\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ekycChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accessTokenArg = args[0] as! String
        let tokenIdArg = args[1] as! String
        let tokenKeyArg = args[2] as! String
        let languageArg = args[3] as! String
        api.ekyc(accessToken: accessTokenArg, tokenId: tokenIdArg, tokenKey: tokenKeyArg, language: languageArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ekycChannel.setMessageHandler(nil)
    }
  }
}
